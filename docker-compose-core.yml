version: '3.8'

services:
  # PostgreSQL - Configuration and Audit Database
  postgresql:
    image: ${POSTGRES_IMAGE:-postgres:15-alpine}
    container_name: postgresql
    hostname: postgresql
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=iib_config
      - POSTGRES_USER=iib_user
      - POSTGRES_PASSWORD=iib_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - iib-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iib_user -d iib_config"]
      interval: 30s
      timeout: 10s
      retries: 5

  # InfluxDB - Time Series Database for Metrics
  influxdb:
    image: ${INFLUXDB_IMAGE:-influxdb:2.7-alpine}
    container_name: influxdb
    hostname: influxdb
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password123
      - DOCKER_INFLUXDB_INIT_ORG=iib_org
      - DOCKER_INFLUXDB_INIT_BUCKET=iib_metrics
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - iib-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis - Cache and Session Store
  redis:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: redis
    hostname: redis
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redispass
    volumes:
      - redis-data:/data
    networks:
      - iib-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a redispass ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch - Log Storage and Search
  elasticsearch:
    image: ${ELASTICSEARCH_IMAGE:-elasticsearch:8.11.0}
    container_name: elasticsearch
    hostname: elasticsearch
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - iib-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana - Log Visualization
  kibana:
    image: ${KIBANA_IMAGE:-kibana:8.11.0}
    container_name: kibana
    hostname: kibana
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch
    networks:
      - iib-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5

  # Grafana - Metrics Dashboard
  grafana:
    image: ${GRAFANA_IMAGE:-grafana/grafana:10.2.0}
    container_name: grafana
    hostname: grafana
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-influxdb-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - influxdb
      - prometheus
    networks:
      - iib-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus - Metrics Collection
  prometheus:
    image: ${PROMETHEUS_IMAGE:-prom/prometheus:v2.47.0}
    container_name: prometheus
    hostname: prometheus
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - iib-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx - Load Balancer and Reverse Proxy
  nginx:
    image: ${NGINX_IMAGE:-nginx:1.25-alpine}
    container_name: nginx
    hostname: nginx
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - grafana
      - kibana
    networks:
      - iib-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # IBM App Connect Enterprise (ACE) - Optional, requires IBM account
  ace-server:
    image: ibmcom/ace:${ACE_VERSION:-latest}
    container_name: ace-server
    hostname: ace-server
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "7600:7600"   # Administration port
      - "7800:7800"   # Payment Processing EG HTTP port
      - "7801:7801"   # Trading Data EG HTTP port
      - "7802:7802"   # Monitoring EG port
      - "9443:9443"   # ACE Web UI
    environment:
      - LICENSE=accept
      - ACE_SERVER_NAME=ACESERVER
      - ACE_ENABLE_METRICS=true
      - ACE_LOG_LEVEL=INFO
    mem_limit: ${ACE_MEMORY_LIMIT:-2g}
    volumes:
      - ./deployment/bars:/home/aceuser/bars
      - ./deployment/config:/home/aceuser/config
      - ./deployment/logs:/home/aceuser/logs
      - ace-work:/home/aceuser/ace-server
    networks:
      - iib-network
    depends_on:
      - postgresql
      - influxdb
    restart: "no"  # Don't auto-restart if fails due to auth issues
    profiles:
      - ibm  # Only start with --profile ibm

  # IBM MQ - Optional, requires IBM account
  ibm-mq:
    image: ibmcom/mq:${MQ_VERSION:-latest}
    container_name: ibm-mq
    hostname: ibm-mq
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "1414:1414"   # MQ Client port
      - "9444:9443"   # MQ Web Console
      - "9157:9157"   # MQ metrics port
    environment:
      - LICENSE=accept
      - MQ_QMGR_NAME=QM_IIB
      - MQ_APP_PASSWORD=passw0rd
      - MQ_ADMIN_PASSWORD=passw0rd
    mem_limit: ${MQ_MEMORY_LIMIT:-1g}
    volumes:
      - mq-data:/mnt/mqm
      - ./mq/config:/etc/mqm
    networks:
      - iib-network
    restart: "no"  # Don't auto-restart if fails due to auth issues
    profiles:
      - ibm  # Only start with --profile ibm

networks:
  iib-network:
    driver: bridge
    name: iib-network

volumes:
  postgres-data:
    name: iib_postgres_data
  influxdb-data:
    name: iib_influxdb_data
  influxdb-config:
    name: iib_influxdb_config
  redis-data:
    name: iib_redis_data
  elasticsearch-data:
    name: iib_elasticsearch_data
  grafana-data:
    name: iib_grafana_data
  prometheus-data:
    name: iib_prometheus_data
  ace-work:
    name: iib_ace_work
  mq-data:
    name: iib_mq_data
